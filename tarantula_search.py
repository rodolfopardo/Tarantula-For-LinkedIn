import requests, reheaders = {    'authority': 'www.linkedin.com',    'cache-control': 'max-age=0',    'sec-ch-ua': '"Google Chrome";v="95", "Chromium";v="95", ";Not A Brand";v="99"',    'sec-ch-ua-mobile': '?0',    'sec-ch-ua-platform': '"macOS"',    'upgrade-insecure-requests': '1',    'origin': 'https://www.linkedin.com',    'content-type': 'application/x-www-form-urlencoded',    'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36',    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',    'sec-fetch-site': 'same-origin',    'sec-fetch-mode': 'navigate',    'sec-fetch-user': '?1',    'sec-fetch-dest': 'document',    'referer': 'https://www.linkedin.com/',    'accept-language': 'en-GB,en;q=0.9',    'cookie': 'JSESSIONID=ajax:2815718941394657455; lang=v=2&lang=en-us; bcookie="v=2&0c81df03-0f9f-4c64-8766-fce32eba1aad"; bscookie="v=1&202110301249392d702694-4913-418c-8613-c0b647823dfeAQGt0oUVaep0zyJz3wjleFV5keTj-feI"; lidc="b=TGST00:s=T:r=T:a=T:p=T:g=2722:u=1:x=1:i=1635598179:t=1635684579:v=2:sig=AQE9vi6H5gmrE9zEpcLBASqDEvUtrUXE"; G_ENABLED_IDPS=google; AMCVS_14215E3D5995C57C0A495C55%40AdobeOrg=1; AMCV_14215E3D5995C57C0A495C55%40AdobeOrg=-637568504%7CMCIDTS%7C18931%7CMCMID%7C08027826045016946680556635547870123997%7CMCAAMLH-1636202982%7C12%7CMCAAMB-1636202982%7C6G1ynYcLPuiQxYZrsz_pkqfLG9yMXBpb2zX5dvJdYQJzPXImdj0y%7CMCOPTOUT-1635605382s%7CNONE%7CvVersion%7C5.1.1; aam_uuid=08588172376626490950537826286015718422',}data = {  'loginCsrfParam': '0c81df03-0f9f-4c64-8766-fce32eba1aad',  'session_key': 'tarantula.1110101@protonmail.com',        # You may change it  'session_password': 'T4ran7ula',                          # You may change it  'trk': 'homepage-basic_signin-form_submit',  'controlId': 'd_homepage-guest-home-homepage-basic_signin-form_submit-button',  'pageInstance': 'urn:li:page:d_homepage-guest-home_jsbeacon;1qFPI6fTRmmEM+eKMl4oIw=='}def searchProfiles(keywords, pages, number):    profiles = []    with requests.Session() as s:        response = s.post('https://www.linkedin.com/uas/login-submit', headers=headers, data=data)        params = (            ('origin', 'CLUSTER_EXPANSION'),            ('sid', 'xO5'),        )        for _ in range(1, pages + 1):            print(params + tuple([('page', str(_)), ('keywords', keywords)]))            response = s.get('https://www.linkedin.com/search/results/people/', params=params + tuple([('page', str(_)), ('keywords', keywords)]))            shit = response.text.split("?miniProfile")            temp = []            for i in shit:                temp += re.findall(r'https://www.linkedin.com/in/(.*)', i)            i = 0            while i != len(temp):                if len(temp[i]) >= 100:                    temp.pop(i)                else:                    i += 1            temp = list(set(temp))            if len(temp) == 0:                break            profiles += temp            if len(profiles) >= number:                break    return profiles[:number]